using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Svelto.DataStructures;
using Svelto.ECS.Schema.Definition;
using Svelto.ECS.Schema.Internal;

namespace Svelto.ECS.Schema.Internal
{
    public abstract partial class TablesBase
    {
        internal FasterReadOnlyList<ExclusiveGroupStruct> _groups;

        public static implicit operator FasterReadOnlyList<ExclusiveGroupStruct>(TablesBase tables) => tables._groups;
        public static implicit operator LocalFasterReadOnlyList<ExclusiveGroupStruct>(TablesBase tables) => tables._groups;
    }

    public abstract partial class TablesBase<TRow> : TablesBase, IEntityTables<TRow>, IEntityTablesBuilder<TRow>
        where TRow : IEntityRow
    {
        internal readonly IEntityTable<TRow>[] _tables;

        /// <summary>
        /// Indicates if Tables<T> is combined form of existing tables
        /// or generated by user as part of schema
        /// </summary>
        public bool IsCombined { get; }

        public int Range => _tables.Length;

        protected TablesBase(IEntityTable<TRow>[] tables, bool isCombined)
        {
            IsCombined = isCombined;

            _tables = tables;
            _groups = _tables.Select(x => x.ExclusiveGroup).ToFasterList();
        }

        public IEntityTable<TRow> this[int index] => _tables[index];
        public IEntityTable<TRow> Get(int index) => _tables[index];

        public static implicit operator TablesBuilder<TRow>(TablesBase<TRow> rangedTable)
            => new TablesBuilder<TRow>(rangedTable._tables);

        IEnumerable<IEntityTable<TRow>> IEntityTablesBuilder<TRow>.Tables => _tables;

        public LocalFasterReadOnlyList<ExclusiveGroupStruct> ExclusiveGroups => this;

        IEntityTable IEntityTables.GetTable(int index) => _tables[index];
        IEntityTable<TRow> IEntityTables<TRow>.GetTable(int index) => _tables[index];
    }
}

namespace Svelto.ECS.Schema.Definition
{
    public sealed class EntityTables<TRow> : TablesBase<TRow>
        where TRow : IEntityRow
    {
        internal EntityTables(IEnumerable<IEntityTable<TRow>> tables) : base(tables.ToArray(), true) { }
        internal EntityTables(FasterList<IEntityTable<TRow>> tables) : base(tables.ToArray(), true) { }
    }
}