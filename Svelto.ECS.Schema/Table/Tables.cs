using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using Svelto.DataStructures;
using Svelto.ECS.Schema.Definition;
using Svelto.ECS.Schema.Internal;

namespace Svelto.ECS.Schema
{
    namespace Internal
    {
        public abstract partial class TablesBase<TDesc> : ISchemaDefinitionTables
            where TDesc : IEntityDescriptor, new()
        {
            internal readonly Table<TDesc>[] _tables;
            internal readonly FasterReadOnlyList<ExclusiveGroupStruct> _groups;

            /// <summary>
            /// Indicates if Tables<T> is combined form of existing tables
            /// or generated by user as part of schema
            /// </summary>
            public bool IsCombined { get; }

            public int Range => _tables.Length;

            protected TablesBase(int range)
            {
                IsCombined = false;

                _tables = new Table<TDesc>[range];

                var groups = new FasterList<ExclusiveGroupStruct>(range);

                for (int i = 0; i < range; ++i)
                {
                    _tables[i] = new Table<TDesc>();
                    groups.Add(_tables[i].ExclusiveGroup);
                }

                _groups = groups;
            }

            protected TablesBase(IEnumerable<Table<TDesc>> tables)
            {
                IsCombined = true;

                _tables = tables.ToArray();

                var groups = new FasterList<ExclusiveGroupStruct>(Range);

                for (int i = 0; i < Range; ++i)
                    groups.Add(_tables[i].ExclusiveGroup);

                _groups = groups;
            }

            public Table<TDesc> this[int index] => _tables[index];
            public Table<TDesc> Get(int index) => _tables[index];

            public static implicit operator TablesBuilder<TDesc>(TablesBase<TDesc> rangedTable)
                => new TablesBuilder<TDesc>(rangedTable._tables);

            public static TablesBuilder<TDesc> operator +(TablesBase<TDesc> a, TablesBase<TDesc> b)
                => (TablesBuilder<TDesc>)a + (TablesBuilder<TDesc>)b;

            ISchemaDefinitionTable ISchemaDefinitionTables.GetTable(int index) => _tables[index];

            public static implicit operator FasterReadOnlyList<ExclusiveGroupStruct>(TablesBase<TDesc> tables) => tables._groups;
            public static implicit operator LocalFasterReadOnlyList<ExclusiveGroupStruct>(TablesBase<TDesc> tables) => tables._groups;
        }
    }

    namespace Definition
    {
        public sealed class Tables<TDesc, TIndex> : TablesBase<TDesc>
            where TDesc : IEntityDescriptor, new()
        {
            internal readonly Func<TIndex, int> _mapper;

            internal Tables(int range, Func<TIndex, int> mapper) : base(range)
            {
                _mapper = mapper;
            }

            public Table<TDesc> this[TIndex index] => _tables[_mapper(index)];
            public Table<TDesc> Get(TIndex index) => _tables[_mapper(index)];
        }

        public sealed class Tables<TDesc> : TablesBase<TDesc>
            where TDesc : IEntityDescriptor, new()
        {
            public Tables(int range) : base(range) { }
            internal Tables(IEnumerable<Table<TDesc>> tables) : base(tables) { }
        }
    }
}